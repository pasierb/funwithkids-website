---
export interface Props {
  label: string;
  name: string;
  options: { label: string; value: string }[];
}

const { label, options, name } = Astro.props;
---

<script>
  import { $spotFilters, SpotFilters } from '~/stores/spotFilters.store';

  function closeDropdown(element: HTMLElement) {
    element.querySelectorAll<HTMLDivElement>('[data-component="MultiSelectFilter__Dropdown"]').forEach((el) => {
      el.classList.add('hidden');
    });
  }

  document.querySelectorAll<HTMLDivElement>('[data-component="MultiSelectFilter"]').forEach((el) => {
    const inputName = el.dataset.inputName as keyof SpotFilters;
    const form = el.querySelector<HTMLFormElement>('form')!;
    const parent = el.parentElement!;

    el.querySelector<HTMLButtonElement>('button')!.addEventListener('click', () => {
      const dropdownEl = el.querySelector<HTMLDivElement>('[data-component="MultiSelectFilter__Dropdown"]')!;

      if (dropdownEl.classList.contains('hidden')) {
        parent.querySelectorAll<HTMLDivElement>('[data-component="MultiSelectFilter"]').forEach(closeDropdown);
      }
      dropdownEl.classList.toggle('hidden');
    });

    el.querySelectorAll<HTMLInputElement>('input[type="checkbox"]').forEach((input) => {
      input.addEventListener('change', () => {
        const formData = new FormData(form);

        $spotFilters.setKey(
          inputName!,
          formData.getAll(`${inputName}[]`).map((v) => v.toString())
        );
      });
    });
  });
</script>

<div class="relative inline-block text-left" data-component="MultiSelectFilter" data-input-name={name}>
  <div>
    <button
      type="button"
      class="group inline-flex items-center justify-center text-sm font-medium text-gray-700 hover:text-gray-900"
      aria-expanded="false"
    >
      <span>{label}</span>
      <svg
        class="-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500"
        viewBox="0 0 20 20"
        fill="currentColor"
        aria-hidden="true"
      >
        <path
          fill-rule="evenodd"
          d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
          clip-rule="evenodd"></path>
      </svg>
    </button>
  </div>

  <!--
          Entering: "transition ease-out duration-100"
            From: "transform opacity-0 scale-95"
            To: "transform opacity-100 scale-100"
          Leaving: "transition ease-in duration-75"
            From: "transform opacity-100 scale-100"
            To: "transform opacity-0 scale-95"
        -->
  <div
    class="hidden absolute right-0 z-[500] mt-2 origin-top-right rounded-md bg-white p-4 shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none"
    data-component="MultiSelectFilter__Dropdown"
  >
    <form class="space-y-4">
      {
        options.map((option) => (
          <div class="flex items-center">
            <input
              name={`${name}[]`}
              value={option.value}
              type="checkbox"
              class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
            />
            <label for="filter-sizes-0" class="ml-3 whitespace-nowrap pr-6 text-sm font-medium text-gray-900">
              {option.label}
            </label>
          </div>
        ))
      }
    </form>
  </div>
</div>
